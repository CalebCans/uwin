#!/bin/sh
########################################################################
#                                                                      #
#              This software is part of the uwin package               #
#          Copyright (c) 1996-2011 AT&T Intellectual Property          #
#                      and is licensed under the                       #
#                 Eclipse Public License, Version 1.0                  #
#                    by AT&T Intellectual Property                     #
#                                                                      #
#                A copy of the License is available at                 #
#          http://www.eclipse.org/org/documents/epl-v10.html           #
#         (with md5 checksum b35adb5213ca9657e911e9befb180842)         #
#                                                                      #
#              Information and Software Systems Research               #
#                            AT&T Research                             #
#                           Florham Park NJ                            #
#                                                                      #
#                  David Korn <dgk@research.att.com>                   #
#                 Glenn Fowler <gsf@research.att.com>                  #
#                                                                      #
########################################################################
#
# mksymtab.sh
# Written by David Korn
# AT&T Labs
# Wed Jan 17 10:22:49 EST 2001
#
case $(getopts '[-]' opt "--???man" 2>&1) in
version=[0-9]*)
	usage=$'[-?@(#)$Id: mksymtab (AT&T Labs Research) 2011-05-18 $\n]
	'$USAGE_LICENSE$'
	[+NAME? mksymtab - create a symbol table for a program ]
	[+DESCRIPTION?\bmksymtab\b generates a C++ program 
		that contains the names and addresses of all of the 
		global symbols defined by all of the given \afile\as.
		It is typically invoked by \bcc\b when \b-Z\b is specified.]
	[+?Unless the \b-n\b option is specified the generated C++ program
		is compiled into the file \b__symtab.o\b and the C++
		program is deleted.  If the \b__symtab.o\b file
		linked into a program, it will cause this symbol table to be
		accessible by the \bdlsym\b(3) library function.]
	[+?The list of symbols is generated by \bnm\b(1) so that \afile\a
		can only be an object file or a library archive.]
	[n?Do not compile and remove the generated C++ program.]
	[o]:[output:=__symtab.cc?\aoutput\a will be the name of the generated
		 C++ file.]

	file ...

	[+EXIT STATUS?]{
       		 [+0?Success.]
       		 [+>0?An error occurred.]
	}
	[+SEE ALSO?\bnm\b(1), \bdlsym\b(3)]
	'
	;;
*)
	usage=''
	;;
esac

outfile=__symtab.cc
unset nflag

while getopts "$usage" var
do	case $var in
	n)	nflag=1;;
	o)	outfile=$OPTARG;;
	esac
done
shift $((OPTIND-1))

function filter
{
	# eliminate leading _ and trailing @* and filter out import symbols
	set -f
	IFS=
	typeset imp_prefix=__imp__
	if	[[ $(uname -p) != x86 ]]
	then	imp_prefix=__imp_
	fi
	oldsym=
	while	read -ru3 sym
	do	#sym=${sym%\@*}
		case $sym in
		$imp_prefix*)	sym=${sym#$imp_prefix}
				if	[[ $oldsym && $sym != "$oldsym" ]]
				then	print -r "$oldsym"
				fi
				oldsym=;;
		__NULL_IMPORT_DESCRIPTOR)	;;
		__IMPORT_DESCRIPTOR_*)	;;
		_*)		sym=${sym#_}
				[[ $oldsym ]] && print -r "$oldsym"
				oldsym=$sym;;
		esac
	done 3<& 0
	[[ $oldsym ]] && print -r "$oldsym"
}

set -- $(nm -N "$@" | filter | /usr/bin/sort -u)

cat > $outfile << \!!!
extern "C"
{
	extern void _ast_setsymtab(void*,int);
!!!

for  i
do	case $i in
	*@*)
		n=${i#*@} i=${i%@*}
		if	[[ $n == +([[:digit:]]) ]]
		then	print -n "\textern void __stdcall ${i}("
			comma=
			for	(( ; n > 0; n-=4))
			do	print -n "$comma int"
				comma=,
			done
			print ');'
		else	print -u2 'warning: invalid symbold name' "$i@$n"
		fi
		;;
	*)	print "\textern void ${i}(void);"
		;;
	esac
done 	>>  $outfile
cat >> $outfile << \!!!

	const struct
	{
		const char *name;
		void	(*fun)();
	}  __symtab__[] =
	{
!!!
for  i
do	i=${i%@*}
	print "\t\t{\"$i\",\t(void(*)(void))&$i},"
done >> $outfile

cat >> $outfile << \!!!
	};
};

class _Fake
{
public:
	_Fake(void)
	{
		_ast_setsymtab((void*)__symtab__,sizeof(__symtab__)/sizeof(*__symtab__));
	}
private:
	int x;
};
static _Fake _fake;

!!!
if	[[ ! $nflag ]] && CC -c  $outfile -o __symtab.o
then	rm -f "$outfile"
fi
