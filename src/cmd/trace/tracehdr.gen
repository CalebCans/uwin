: generate tracehdr.h from trace.tab

set -o noglob

integer call_count
integer call_index
integer	type_index
integer arg_index
typeset -A types TYPES FLAGS

case $# in
1)	;;
*)	print -u2 "Usage: $0 file"
	exit 2
	;;
esac
table=$1
if	test ! -r $table
then	print -u2 "$0: $table: cannot read"
	exit 1
fi

: initialize the type indexes

for INDEX in OUTPUT IO AGAIN POINTER BUFFER ARRAY
do	TYPES[$INDEX]=ARG_$INDEX
	FLAGS[$INDEX]=1
done

function addtype
{
	typeset type="$1"
	typeset -u FLAG INDEX POINTER

	case $type in
	...)	return ;;
	*,*)	type=${type%,*} ;;	# NOTE: this is an IFS bug, no?
	esac
	case ${types[$type]} in
	"")	INDEX=${type##*' '}
		INDEX=${INDEX#*:}
		INDEX=${INDEX%'*'}
		INDEX=${INDEX%'['*}
		INDEX=${INDEX%_T}
		case ${FLAGS[$INDEX]} in
		?*)	FLAG="$INDEX|ARG_"
			INDEX=${type%:*}
			INDEX=${INDEX##*' '}
			INDEX=${INDEX#*:}
			INDEX=${INDEX%'*'}
			INDEX=${INDEX%'['*}
			INDEX=${INDEX%_T}
			;;
		esac
		case ${type%:*} in
		'char* const*')	POINTER="POINTER|ARG_" INDEX=ARGV ;;
		*'*')		POINTER="POINTER|ARG_" ;;
		*'['*']')	POINTER="ARRAY|ARG_POINTER|ARG_" ;;
		esac
		case ${TYPES[$INDEX]} in
		"")	TYPES[$INDEX]=ARG_${POINTER}${INDEX}
			(( type_index++ ))
			print "#define ARG_${INDEX}	${type_index}"
			;;
		esac
		types[$type]=ARG_${POINTER}${FLAG}${INDEX}
		;;
	esac
}

: output the header

print "/* : : generated from $table : : */

#include <stdarg.h>
#include <stdlib.h>
#include <int.h>
#include <uwin.h>

#include <sys/stat.h>
#include <sys/time.h>
#include <sys/wait.h>
#include <sys/uio.h>
#include <sys/socket.h>
#include <sys/un.h>
#include <netinet/in.h>

#include <dirent.h>
#include <signal.h>
#include <termios.h>
#include <time.h>
#include <unistd.h>
#include <ucontext.h>

#define elementsof(x)		((int)sizeof(x)/(int)sizeof(x[0]))

#define ARGTYPE(x)	((x)&~(ARG_OUTPUT|ARG_IO|ARG_AGAIN))

#define ARG_OUTPUT	0x8000
#define ARG_IO		0x4000
#define ARG_AGAIN	0x2000
#define ARG_POINTER	0x0800
#define ARG_BUFFER	0x0400
#define ARG_ARRAY	0x0200
"

(( type_index=0 ))
(( call_count=0 ))
while	IFS=$'\t' read type call proto op code
do	case $type in
	'#'*|'') continue ;;
	esac
	IFS=$',' set -- $proto
	case $1 in
	void)	shift ;;
	esac
	addtype "$type"
	for formal
	do	addtype "$formal"
	done
	(( call_count++ ))
done < $table

: output the call table prototype

print "
#define TRACE_SHIFT	20
#define TRACE_LINE	80

#define TRACE_CALL(x)	do {\\
				if (trace.flags)\\
					trace_call x;\\
			} while (0)

#define TRACE_RETURN(x)	do {\\
				if (trace.flags)\\
					trace_return x;\\
			} while (0)

typedef int (*Syscall_f)(int,...);

typedef union
{
	void*		pointer;
	struct stat*	st;
	long		number;
} Systype_t;

typedef struct
{
	const char*	name;
	int		prefix;
	Syscall_f	traced;
	Syscall_f	actual;
	int		type[8];
} Syscall_t;

typedef struct
{
	unsigned long	calls;
	unsigned long	errors;
	unsigned int_8	io;
	unsigned int_8	cycles;
} Syscount_t;

typedef struct
{
	struct
	{
	void*		pointer;
	int		type;
	int		string;
	}		buffer;
	HANDLE		hp;
	int		debug;
	int		flags;
	int		cc;
	int		oflags;
	long		ret;
	unsigned int	pid;
	unsigned int	opid;
	char*		sep;
	char*		bp;
	char*		ep;
	unsigned int_8	cycles;
	unsigned int_8	watch;
	unsigned int_8	start;
	char		buf[4 * 1024];
	Syscount_t	count[${call_count}];
} Systrace_t;

static Syscall_t	sys_call[${call_count}];

static Systrace_t	trace;

#include \"tracelib.h\"
"

: output the call intercept prototypes

(( call_index = -1 ))
while	IFS=$'\t' read type call proto op code op2 code2
do	case $type in
	'#'*|'') continue ;;
	esac
	(( call_index++ ))
	IFS=$',' set -- $proto
	case $1 in
	void)	shift ;;
	esac
	case $type in
	*:*)	part=${type#*:}; type=${type%:*} ;;
	*)	case $op in
		BODY)	continue ;;
		*)	part= ;;
		esac
		;;
	esac
	print
	print "static ${type}"
	print -n "traced_${call}("
	actuals=""
	cast=""
	case $# in
	0)	print -n "void"
		cast="${cast}void"
		;;
	*)	sep=""
		(( arg_index=0 ))
		for formal
		do	(( arg_index++ ))
			case $formal in
			...)	print -n "${sep}${formal}"
				actuals="${actuals}${sep}${formal}"
				break
				;;
			*:*)	formal=${formal%:*}
				array=
				;;
			*'['*']')
				array=$'['${formal#*'['}
				formal=${formal%'['*']'}
				;;
			*)	array=""
				;;
			esac
			case $part in
			KERNEL)	;;
			*)	print -n "${sep}${formal} a${arg_index}${array}" ;;
			esac
			actuals="${actuals}${sep}a${arg_index}"
			cast="${cast}${sep}${formal}${array}"
			sep=", "
		done
		;;
	esac
	case $part in
	BODY)	print ")"
		print "{"
		print "$code"
		print "}"
		;;
	KERNEL)	print "${cast});"
		;;
	*)	cast="(${type}(*)(${cast})"
		print ")"
		print "{"
		print "	$type	r;"
		print
		case $actuals in
		"")	traceuals="" ;;
		*)	traceuals=",${actuals}" ;;
		esac
		case $op in
		BEGIN)	print "	$code"
			op=$op2
			code=$code2
			;;
		esac
		print "	TRACE_CALL((&sys_call[${call_index}]${traceuals}));"
		print "	r = (*${cast})sys_call[${call_index}].actual)(${actuals});"
		print "	TRACE_RETURN((&sys_call[${call_index}],(long)r${traceuals}));"
		case $op in
		END)	print "	$code" ;;
		esac
		print "	return r;"
		print "}"
		;;
	esac
done < $table

: output the call intercept helper functions

(( call_index = -1 ))
while	IFS=$'\t' read type call proto op code op2 code2
do	case $type in
	'#'*|'') continue ;;
	esac
	(( call_index++ ))
	IFS=$',' set -- $proto
	case $1 in
	void)	shift ;;
	esac
	case $type in
	*:*)	part=${type#*:}; type=${type%:*} ;;
	*)	case $op in
		BODY)	part=$op ;;
		*)	continue ;;
		esac
		;;
	esac
	print
	print "static ${type}"
	print -n "traced_${call}("
	actuals=""
	cast=""
	case $# in
	0)	print -n "void"
		cast="${cast}void"
		;;
	*)	sep=""
		(( arg_index=0 ))
		for formal
		do	(( arg_index++ ))
			case $formal in
			...)	print -n "${sep}${formal}"
				actuals="${actuals}${sep}${formal}"
				break
				;;
			*:*)	formal=${formal%:*}
				array=
				;;
			*'['*']')
				array=$'['${formal#*'['}
				formal=${formal%'['*']'}
				;;
			*)	array=""
				;;
			esac
			case $part in
			KERNEL)	;;
			*)	print -n "${sep}${formal} a${arg_index}${array}" ;;
			esac
			actuals="${actuals}${sep}a${arg_index}"
			cast="${cast}${sep}${formal}${array}"
			sep=", "
		done
		;;
	esac
	case $part in
	BODY)	print ")"
		print "{"
		print "$code"
		print "}"
		;;
	KERNEL)	print "${cast});"
		;;
	*)	cast="(${type}(*)(${cast})"
		print ")"
		print "{"
		print "	$type	r;"
		print
		case $actuals in
		"")	traceuals="" ;;
		*)	traceuals=",${actuals}" ;;
		esac
		case $op in
		BEGIN)	print "	$code"
			op=$op2
			code=$code2
			;;
		esac
		print "	TRACE_CALL((&sys_call[${call_index}]${traceuals}));"
		print "	r = (*${cast})sys_call[${call_index}].actual)(${actuals});"
		print "	TRACE_RETURN((&sys_call[${call_index}],(long)r${traceuals}));"
		case $op in
		END)	print "	$code" ;;
		esac
		print "	return r;"
		print "}"
		;;
	esac
done < $table

: output the call table

print "
static Syscall_t	sys_call[${call_count}] =
{"

while	IFS=$'\t' read type call proto op code
do	case $type in
	'#'*|'') continue ;;
	esac
	IFS=$',' set -- $proto
	case $1 in
	void)	shift ;;
	esac
	type=${types[$type]}
	again=
	buf=
	case $call in
	read|readv|recv|recvfrom|recvmsg|send|sendmsg|sendto|write|writev)
		type="ARG_IO|${type}"
		case $call in
		*msg)	;;
		*)	buf=B ;;
		esac
		;;
	esac
	case $call in
	select|waitpid)
		again="ARG_AGAIN|"
		;;
	esac
	case $call in
	_ast_*)	prefix=5 ;;
	*)	prefix=0 ;;
	esac
	print -n "{ \"${call}\",	$prefix,	(Syscall_f)traced_${call},	0,	{ ${again}${type}"
	for formal
	do	case $formal in
		...)	break ;;
		esac
		type=${types[$formal]}
		case $again in
		?*)	;;
		*)	case $formal in
			const\ *|const\**|*\ const\ *|*\ const\**) ;;
			*'*'|*'['*']')	type="ARG_OUTPUT|${type}" ;;
			esac
			;;
		esac
		print -n ", ${again}${type}"
		case $buf in
		B)	case $type in
			*ARG_POINTER*)
				print -n "|ARG_BUFFER"
				buf=S
				;;
			esac
			;;
		S)	print -n "|ARG_BUFFER"
			buf=
			;;
		esac
	done
	print " } },"
done < $table
print "};"
