#
# traced uwin calls
#
# NOTE: the call names must be in sorted order or dll_intercept() will fail
#

Sig_handler_t	_ast_signal	int:SIGNAL,Sig_handler_t
int*		_ast_vfork	void	END	{ trace.opid = trace.pid; trace.pid = getpid(); }

int	abort		void
int	accept		int,struct sockaddr*,int*
int	access		const char*,int:ACCESS
int	alarm		unsigned int
int	bind		int,const struct sockaddr*,int
int	brk		const void*
speed_t	cfgetispeed	const struct termios*
speed_t	cfgetospeed	const struct termios*
int	cfsetispeed	struct termios*,speed_t
int	cfsetospeed	struct termios*,speed_t
int	chdir		const char*
int	chmod		const char*,mode_t
int	chown		const char*,uid_t,gid_t
int	chroot		const char*
clock_t	clock		void
int	close		int
int	closedir	DIR*
int	confstr		int:CONFSTR,char*,size_t
int	connect		int,const struct sockaddr*,int
int	creat		const char*,mode_t
int	dup		int
int	dup2		int,int
int	execl		const char*,const char*,...	BODY	return traced_execve(a1,(char*const*)&a2,0);
int	execle		const char*,const char*,...	BODY	va_list v; const char* p = a2; va_start(v, a2); while (p) p = va_arg(v, const char*); p = va_arg(v, const char*); va_end(v); return traced_execve(a1, (char*const*)&a2, (char*const*)p);
int	execv		const char*,char* const*	BODY	return traced_execve(a1,a2,0);
int	execve		const char*,char* const*,char* const*	BEGIN	{ unsigned int i = trace.pid; trace.pid = trace.opid; trace.opid = i; }	END	{ unsigned int i = trace.pid; trace.pid = trace.opid; trace.opid = i; }
int	fattach		int,const char*
int	fchmod		int,mode_t
int	fcntl		int,int:FCNTL,struct fcntl_arg*
int	fdetatch	const char*
int	flock		int,int
pid_t	fork		void
int	fpathconf	int,int:PATHCONF
int	fstat		int,struct stat*
int	fstat64		int,struct stat64*
int	fstatvfs	int,struct statvfs*
int	fsync		int
int	ftime		struct timeb*
int	ftruncate	int,off_t
int	ftruncate64	int,off64_t
char*	getcwd		char*,size_t
int	getdtablesize	void
gid_t	getegid		void
uid_t	geteuid		void
gid_t	getgid		void
int	getgroups	int,gid_t*
long	gethostid	void
int	gethostname	char*,int
int	getitimer	int:ITIMER,struct itimerval*
int	getmsg		int,struct strbuf*,int*
int	getpagesize	void
int	getpeername	int,struct sockaddr*,int*
pid_t	getpgid		pid_t
pid_t	getpgrp		void
pid_t	getpid		void
int	getpmsg		int,struct strbuf*,struct strbuf*,int*,int*
pid_t	getppid		void
int	getpriority	int,int
int	getrlimit	int:RLIMIT_TYPE,struct rlimit*
int	getrlimit64	int:RLIMIT_TYPE,struct rlimit64*
int	getrusage	int,struct rusage*
pid_t	getsid		pid_t
int	getsockname	int,struct sockaddr*,int*
int	getsockopt	int,int,int,void*,int*
int	gettimeofday	struct timeval*,struct timezone*
uid_t	getuid		void
int	grantpt		int
int	initgroups	const char*,gid_t
int	ioctl		int,int:IOCTL,void*
int	kill		pid_t,int:SIGNAL
int	killpg		pid_t,int:SIGNAL
int	lchown		const char*,uid_t,gid_t
int	link		const char*,const char*
int	listen		int,int
int	lockf		int,int,off_t
off_t	lseek		int,off_t,int:SEEK
off64_t	lseek64		int,off64_t,int:SEEK
int	lstat		const char*,struct stat*
int	lstat64		const char*,struct stat64*
int	mkdir		const char*,mode_t
int	mkfifo		const char*,mode_t
int	mknod		const char*,mode_t,dev_t
int	mlock		const void*,size_t
int	mlockall	int
void*	mmap		void*,size_t,int:MAP_PROTECT,int:MAP_FLAGS,int,off_t
int	mount		const char*,const char*,int:MOUNT,const char*,const void*:BUFFER,size_t:BUFFER	BEGIN	if (!a1 || !*a1 || !a2 || !*a2) { errno = EINVAL; return -1; } if (!(a3 & MS_DATA)) { a5 = 0; a6 = 0; }
int	mprotect	void*,size_t,int:MAP_PROTECT
int	msgctl		int,int,struct msqid_ds*
int	msgget		key_t,int
int	msgrcv		int,void*,size_t,long,int
int	msgsnd		int,const void*,size_t,int
int	msync		void*,size_t,int
int	munlock		const void*,size_t
int	munlockall	void
int	munmap		void*,size_t
int	nanosleep	const struct timespec*,struct timesspec*
int	nice		int
int	open		const char*,int:OPEN,mode_t
DIR*	opendir		const char*
int	pathconf	const char*,int:PATHCONF
int	pause		void
int	pipe		int[2]
int	poll		struct pollfd*,unsigned long,int
int	putmsg		int,const struct strbuf*,const struct strbuf*,int
int	putpmsg		int,const struct strbuf*,const struct strbuf*,int
int	raise		int:SIGNAL
ssize_t	read		int,void*,size_t
struct dirent*	readdir	DIR*
int	readlink	const char*,char*,size_t
ssize_t	readv		int,struct iovec*,int
int	recv		int,void*,size_t,int
int	recvfrom	int,void*,size_t,int,struct sockaddr*,int*
int	recvmsg		int,struct msghdr*,int
int	rename		const char*,const char*
int	rewinddir	DIR*
int	rmdir		const char*
void*	sbrk		int
int	seekdir		DIR*,off_t
int	select		int,fd_set*,fd_set*,fd_set*,struct interval*
int	semctl		int,int,int,void*
int	semget		key_t,int,int
int	semop		int,struct semops*,size_t
int	send		int,const void*,int,int
int	sendmsg		int,const struct msghdr*,int
int	sendto		int,const void*,int,int:SOCK_MSG,const struct sockaddr*,int
int	setcontext	const ucontext_t*
int	setegid		gid_t
int	seteuid		uid_t
int	setgid		gid_t
int	setgroups	int,gid_t*
int	setitimer	int:ITIMER,const struct itimerval*,struct itimerval*
char*	setlocale	int:LOCALE,const char*
int	setpgid		pid_t,pid_t
int	setpgrp		void
int	setpriority	int,int,int
int	setrlimit	int:RLIMIT_TYPE,const struct rlimit*
int	setrlimit64	int:RLIMIT_TYPE,const struct rlimit64*
pid_t	setsid		void
int	setsockopt	int,int,int,const void*,int
int	setuid		uid_t
int	shm_open	const char*,int,mode_t
int	shm_unlink	const char*
int	shmat		int,void*,int
int	shmctl		int,int,struct shmid_ds*
int	shmdt		void*
int	shmget		key_t,int,int
int	shutdown	int,int
int	sigaction	int:SIGNAL,const struct sigaction*,struct sigaction*
int	sigblock	int:SIGMASK
int	sighold		int:SIGNAL
int	sigignore	int:SIGNAL
int	siginterrupt	int:SIGNAL,int
Sig_handler_t	signal		int:SIGNAL,Sig_handler_t
int	sigpause	int:SIGNAL
int	sigpending	sigset_t*
int	sigprocmask	int:SIG_PROC,const sigset_t*,sigset_t*
int	sigrelse	int:SIGNAL
Sig_handler_t	sigset		int:SIGNAL,Sig_handler_t
int	sigsetmask	int:SIGMASK
int	sigsuspend	sigset_t*
int	sigtimedwait	const sigset_t*,siginfo_t*,const struct timespec*
int	sigwaitinfo	const sigset_t*,siginfo_t*
int	sleep		int
int	socket		int:SOCK_DOMAIN,int:SOCK_TYPE,int:SOCK_PROTOCOL
int	socketpair	int:SOCK_DOMAIN,int:SOCK_TYPE,int:SOCK_PROTOCOL,int[2]
int	spawnl		const char*,const char*,...	BODY	return traced_spawnve(a1,(char*const*)&a2,0);
int	spawnle		const char*,const char*,...	BODY	va_list v; const char* p = a2; va_start(v, a2); while (p) p = va_arg(v, const char*); p = va_arg(v, const char*); va_end(v); return traced_spawnve(a1, (char*const*)&a2, (char*const*)p);
pid_t	spawnv		const char*,char* const*	BODY	return traced_spawnve(a1,a2,0);
pid_t	spawnve		const char*,char* const*,char* const*
pid_t	spawnveg	const char*,char* const*,char* const*,pid_t
pid_t	spawnvetok	const char*,char* const*,char* const*,HANDLE
int	stat		const char*,struct stat*
int	stat64		const char*,struct stat64*
int	statvfs		const char*,struct statvfs*
int	symlink		const char*,const char*
int	sync		void
long	sysconf		int:SYSCONF
int	tcdrain		int
int	tcflow		int,int
int	tcflush		int,int
int	tcgetattr	int,struct termios*
pid_t	tcgetpgrp	int,pid_t
pid_t	tcgetsid	int
int	tcsendbreak	int,int
int	tcsetattr	int,int,const struct termios*
int	tcsetpgrp	int,pid_t
int	telldir		DIR*
time_t	time		const time_t*
clock_t	times		struct tms*
int	truncate	const char*,off_t
int	truncate64	const char*,off64_t
int	ttyslot		void
int	ualarm		useconds_t,useconds_t
long	ulimit		int,long
mode_t	umask		mode_t
int	umount		const char*
int	uname		struct utsname*
int	unlink		const char*
int	unlockpt	int
int	usleep		useconds_t
int	utime		const char*,const struct utimbuf*
int	utimes		const char*,const struct timeval[2]
int	utimets		const char*,const struct timespec[2]
char*	uwin_setlocale	int:LOCALE,const char*
pid_t	uwin_spawn	const char*,char* const*,char* const*,const struct spawndata*
pid_t	wait		int*
pid_t	wait3		int*,int,struct rusage*
int	waitid		idtype_t,pid_t,siginfo_t*,int
pid_t	waitpid		pid_t,int*,int
ssize_t	write		int,const void*,size_t
ssize_t	writev		int,const struct iovec*,int
