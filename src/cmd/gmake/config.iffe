set	config

hdr	alloca,ar,dirent,fcntl,float,inttypes,limits,locale,mach_mach
hdr	memory,ndir,nlist,stdarg,stdlib,string,unistd,varargs,vfork,vmsdir

key	const =

lib	bsd_signal,clock_gettime,dup2,fdopen,fork,getcwd,getloadavg
lib	getopt,getopt_long,gettimeofday,libkstat,memmove,mkstemp,mktemp
lib	pstat_getdynamic,setegid,seteuid,setlinebuf,setlocale,setregid
lib	setreuid,setvbuf,sigaction,sigsetmask,strcasecmp,strchr,strdup
lib	strerror,strsignal,vprintf,wait3,waitpid
lib	isascii ctype.h
lib	vfork = fork

mac	SA_RESTART signal.h
sys	dir,ndir,param,timeb,time,wait
typ	pid_t = int

tst	HAVE_ANSI_COMPILER note{ ansi C compiler }end compile{
	#include <stdarg.h>
	#include <stdio.h>
	#include <sys/types.h>
	#include <sys/stat.h>
	#undef	__OTORP__
	#undef	__PARAM__
	#undef	__PROTO__
	struct buf { int x; };
	FILE * (*rcsopen) (struct buf *, struct stat *, int);
	char *e (p, i)
     	char **p;
     	int i;
	{
  		return p[i];
	}
	char *f (char * (*g) (char **, int), char **p, ...)
	{
  		char *s;
  		va_list v;
  		va_start (v,p);
  		s = g (p, va_arg (v,int));
  		va_end (v);
  		return s;
	}
}end

tst	note{ signal handler return type }end compile{
		#include <sys/types.h>
		#include <signal.h>
		#undef signal
		extern void (*signal())();
	}end yes{	
		#define RETSIGTYPE void
	}end no{
		#define RETSIGTYPE int
	}end

tst	- -DN=1 inttypes.h - -DN=2 - -DN=3 - -DN=4 - -DN=5 - -DN=6 - -DN=7 - -DN=8 - -DN=9 - -DN=0 note{ largest unsigned int type }end output{
	#include <sys/types.h>

	#if N == 1
	#define _ast_int8_t	uintmax_t
	#endif
	#if N == 2
	#define _ast_int8_t	unsigned long
	#define _ast_int8_str	"unsigned long"
	#endif
	#if N == 3
	#define _ast_int8_t	unsigned __int64
	#define _ast_int8_str	"unsigned __int64"
	#endif
	#if N == 4
	#define _ast_int8_t	unsigned long long
	#define _ast_int8_str	"unsigned long long"
	#endif
	#if N == 5
	#define _ast_int8_t	unsigned __int64_t
	#define _ast_int8_str	"unsigned __int64_t"
	#endif
	#if N == 6
	#define _ast_int8_t	unsigned _int64_t
	#define _ast_int8_str	"unsigned _int64_t"
	#endif
	#if N == 7
	#define _ast_int8_t	unsigned int64_t
	#define _ast_int8_str	"unsigned int64_t"
	#endif
	#if N == 8
	#define _ast_int8_t	unsigned _int64
	#define _ast_int8_str	"unsigned _int64"
	#endif
	#if N == 9
	#define _ast_int8_t	unsigned int64
	#define _ast_int8_str	"unsigned int64"
	#endif
	#if N == 0
	#define _ast_int8_t	unsigned long
	#define _ast_int8_str	"unsigned long"
	#endif
	_ast_int8_t n = 0;
	int
	main()
	{
	#if N >= 1
		if (sizeof(_ast_int8_t) < 8)
			return 1;
	#endif
	#if N != 1
		printf("#define uintmax_t	%s\n", _ast_int8_str);
	#endif
		return 0;
	}
}end

tst	CLOSEDIR_VOID note{ closedir() is a void function }end nocompile{
		#include <dirent.h>
		int
		main()
		{
			return closedir(0);
		}
	}end

tst	DOS_PATHS note{ DOS paths -- still in the 20th century }end nocompile{
		#if _WINIX || _UWIN || __CYGWIN__ || __EMX__ || __MSDOS__
		(
		#endif
		int i;
	}end

tst	HAVE_ALLOCA note{ alloca works }end link{
		#ifdef __GNUC__
		# define alloca __builtin_alloca
		#else
		# ifdef _MSC_VER
		#  include <malloc.h>
		#  define alloca _alloca
		# else
		#  if HAVE_ALLOCA_H
		#   include <alloca.h>
		#  else
		#   ifdef _AIX
 		#pragma alloca
		#   else
		#    ifndef alloca /* predefined by HP cc +Olibcalls */
		char *alloca ();
		#    endif
		#   endif
		#  endif
		# endif
		#endif

		int
		main()
		{
			char *p = (char*)alloca(1);
  			return 0;
		}
}end

tst	HAVE_DMALLOC_H note{ dmalloc.h cooperates with std*.h }end link{
		#include <stdlib.h>
		#include <dmalloc.h>
		int
		main()
		{
			return malloc(16) == 0;
		}
}end

tst	HAVE_UNION_WAIT note{ use union wait }end link{
		#include <sys/types.h>
		#include <sys/wait.h>
		#if defined(WEXITSTATUS) || defined(WTERMSIG)
		(
		#endif
		int
		main()
		{
			union wait status;
		#ifdef HAVE_WAITPID
			waitpid(0, &status, 0);
		#endif
		#ifdef HAVE_WAIT3
			wait3(&status, 0, 0);
		#endif
		}
}end

tst	HAVE_WORKING_FORK note{ fork works }end execute{
		#if HAVE_UNISTD_H
		#include <unistd.h>
		#endif
		int
		main()
		{
			return fork() < 0;
		}
}end

tst	TIME_WITH_SYS_TIME note{ <time.h> and <sys./time.h> cooperate }end compile{
		#include <sys/types.h>
		#include <time.h>
		#include <sys/time.h>
		struct tm tm;
}end

if	! lib strcmpi {
	#define strcmpi	strcasecmp
}
endif

if	mem - stat.st_mtimespec.tv_nsec sys/stat.h {
	#define st_mtim			st_mtimespec
	#define ST_MTIM_NSEC		tv_nsec
	#define FILE_TIMESTAMP_HI_RES	1
}
elif	mem - stat.st_mtim.st__tim.tv_nsec sys/stat.h {
	#define ST_MTIM_NSEC		st__tim.tv_nsec
	#define FILE_TIMESTAMP_HI_RES	1
}
elif	mem - stat.st_mtim.tv_nsec sys/stat.h {
	#define ST_MTIM_NSEC		tv_nsec
	#define FILE_TIMESTAMP_HI_RES	1
}
else	{
	#define FILE_TIMESTAMP_HI_RES	0
}
endif

HAVE_DOPRNT =			lib	_doprnt
NLIST_STRUCT =			typ	struct.nlist nlist.h
HAVE_STRUCT_NLIST_N_UN_N_NAME = mem	nlist.n_un.n_name nlist.h
SYS_SIGLIST_DECLARED =		! npt	sys_siglist signal.h

STDC_HEADERS =			( HAVE_FLOAT_H & HAVE_STDARG_H & HAVE_STDLIB_H & HAVE_STRING_H )

cat{
	#define SCCS_GET	"get"
}end
