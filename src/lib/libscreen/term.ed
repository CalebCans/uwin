CAP=$1 TMP=t$$ OUT=term.h FEATURES=$2

#Script to generate the user-accessible header file term.h
#Written by Kiem-Phong Vo (12/10/91)

trap "status=\$?; rm -f $TMP.*; exit \$status" 0 1 2

#See if we should configure for _MULTIBYTE or just 8-bit transparency
if test "`grep '_typ_wchar_t.*1' $FEATURES`" != ""
then echo "#define _MULTIBYTE	1"
fi >$TMP.hdr

#Generate function key values
grep "KEY_" $CAP > $TMP.tmp

ed - <<!
E $TMP.tmp
g/.*KEY_/s//KEY_/
g/KEY_F([1-9]/d
g'\(KEY_[^,]*\),[ 	]*\([0-9][0-9]*\),[ 	]*\(.*\)'s''#define \1	\2		/* \3 */'
w
q
!

sort +2n $TMP.tmp > $TMP.keys; rm $TMP.tmp

keymax='KEY_[A-Z]*'
lastline='$'
comment='/.*'
ed - <<!
E $TMP.keys
1i
#define KEY_MIN		0401		/* minimum key value */
#define KEY_BREAK	0401		/* break key (unreliable) */
.
/KEY_F(0)/
s//KEY_F0	/
a
#define KEY_F(n)	(KEY_F0+(n))	/* 64 function keys is reserved. */
.
/KEY_ENTER/a
#define KEY_SRESET	0530		/* soft (partial) reset (unreliable) */
#define KEY_RESET	0531		/* reset or hard reset (unreliable) */
.
/KEY_A1/
i
					/* The keypad is arranged like this: */
					/*    a1    up    a3   */
					/*   left   b2  right  */
					/*    c1   down   c3   */
.
${lastline} w $TMP.keys
${lastline} r $TMP.keys
${lastline} s/${keymax}/KEY_MAX/
${lastline} s,${comment},,
w $TMP.keys
q
!
#rm $TMP.keys

ed - <<!
E $CAP
g/^#.*/d
g/^[a-zA-Z0-9_]*,	*"/s//	_/
g/"	*/s//,	\/* /
g/\/\*.*/s//& *\//
/--- begin bool/
1,.c
/* Boolean capabilities */
struct _bools
{
	bool
.
/--- end bool/
.,\$d
\$
s/,/;/
a
};

.
1,.w $TMP.bool
q
!

ed - <<!
E $CAP
g/^#.*/d
g/^[a-zA-Z0-9_]*,	*"/s//	_/
g/"	*/s//,	\/* /
g/\/\*.*/s//& *\//
/--- begin num/
1,.c
/* Numeric capabilities */
struct _nums
{
	short
.
/--- end num/
.,\$d
\$
s/,/;/
a
};

.
1,.w $TMP.num
!

ed - <<!
E $CAP
g/^#.*/d
g/^[a-zA-Z0-9_]*,	*"/s//	_/
g/"	*/s//,	\/* /
g/\/\*.*/s//& *\//
/--- begin str/
1,.d
/--- end str/
.,\$d
1,100w $TMP.str1
101,200w $TMP.str2
201,\$w $TMP.str3
q
!

ed - <<!
E $TMP.str1
1i
/* String capabilities */
typedef char *	_char_ptr;
struct _strs1
{
	_char_ptr
.
\$
s/,/;/
a
};
.
w $TMP.str1
q
!

ed - <<!
E $TMP.str2
1i
struct _strs2
{
	_char_ptr
.
\$
s/,/;/
a
};
.
w $TMP.str2
q
!

ed - <<!
E $TMP.str3
1i
struct _strs3
{
	_char_ptr
.
\$
s/,/;/
a
};
.
w $TMP.str3
q
!

cat $TMP.bool $TMP.num $TMP.str1 $TMP.str2 $TMP.str3 > $TMP.struct

ed - >/dev/null 2>&1 <<!
E $CAP
g/^#.*/d
/--- begin bool/
1,.d
/--- end bool/
.,\$d
1,\$s/"/cur_tc->_b._/
1,\$s/".*//
1,\$s/,/	/
1,\$s/^/#define /
w $TMP.bool
q
!

ed - <<!
E $CAP
g/^#.*/d
/--- begin num/
1,.d
/--- end num/
.,\$d
1,\$s/"/cur_tc->_n._/
1,\$s/".*//
1,\$s/,/	/
1,\$s/^/#define /
w $TMP.num
q
!

ed - >/dev/null 2>&1 <<!
E $CAP
g/^#.*/d
/--- begin str/
1,.d
/--- end str/
.,\$d
1,100s/"/cur_tc->_s1._/
101,200s/"/cur_tc->_s2._/
201,\$s/"/cur_tc->_s3._/
1,\$s/".*//
1,\$s/,/	/
1,\$s/^/#define /
w $TMP.str
q
!

cat $TMP.bool $TMP.num $TMP.str > $TMP.long

cat > $TMP.HH <<'!'
#ifndef _TERM_H	/* protect against multiple #includes */
#define _TERM_H		1

#define SCREEN_VERSION	20001225L

#include	<ast_common.h>

#if __STD_C
#include	<stdarg.h>
#else
#include	<varargs.h>
#endif

#define	TERMINAL	struct _term_st
#define TERMCAP		struct _tc_st
#define KEY_MAP		struct _key_st
#define MOUSE		struct _mouse_st

#define bool		char

/* logical values */
#ifndef TRUE
#   define TRUE		(1)
#endif
#ifndef FALSE
#   define FALSE	(0)
#endif
#define ERR	(-1)
#define OK	(0)


/* ---SYSTEM--- system configurations */


#if _MULTIBYTE
#if _sys_types
#include	<sys/types.h>
#endif
#if _hdr_stddef
#include	<stddef.h>
#endif
#define CSMAX	4	/* assumed max number of bytes for a character */
#endif

/* the type of a screen column. For ASCII only setting,
   chtype and the A_*'s can be redefined to fit in 16 bits.
   Leftmost bit reserved for MULTIBYTE CBIT (indicator for a continuing col).

   For 32-bit chtype, there are only  6 color-pair bits for    64 color pairs;
   for 64-bit chtype, let there be   31 color-pair bits for 32767 color pairs.

   Notes:
        * #define _CHARTYPE64  to allow 64-bit chtype; otherwise use
		  the old 32-bit chtype for compatibility with old existing code.
        * P.S.  On some machines, 64-bit ints may be emulated (slowly).
*/

#if defined(_ast_int8_t) && defined(_CHARTYPE64)
#define chtype  		_ast_int8_t	/* 64-bit integer implemented */
/* video attributes */
#define	A_STANDOUT  	         000000200000LL
#define	A_UNDERLINE 	         000000400000LL
#define	A_REVERSE   	         000001000000LL
#define	A_BLINK 		 000002000000LL
#define	A_DIM   		 000004000000LL
#define	A_BOLD  		 000010000000LL
#define	A_INVIS 		 000020000000LL
#define A_PROTECT   	         000040000000LL
#define	A_ALTCHARSET	         000100000000LL
#define A_NORMAL    	         000000000000LL
#define A_CHARTEXT  	         000000177777LL
#define A_ATTRIBUTES	 03777777777777600000LL
#define A_COLOR     	 03777777777600000000LL
#define A_NOTCOLOR     	 00000000000177600000LL
#define A_MAXCOLORPAIRS	(017777777777L+1L)	/* implementation-specific limit */
#else   /* _ast_int8_t && _CHARTYPE64_t */
#define chtype  		unsigned long		/* max 32-bit integer implemented */
/* video attributes */
#define	A_STANDOUT  		000000200000L
#define	A_UNDERLINE 		000000400000L
#define	A_REVERSE   		000001000000L
#define	A_BLINK 		000002000000L
#define	A_DIM   		000004000000L
#define	A_BOLD  		000010000000L
#define	A_INVIS 		000020000000L
#define A_PROTECT   		000040000000L
#define	A_ALTCHARSET		000100000000L
#define A_NORMAL    		000000000000L
#define A_CHARTEXT  		000000177777L
#define A_ATTRIBUTES		017777600000L
#define A_COLOR     		017600000000L
#define A_NOTCOLOR     		000177600000L
#define A_MAXCOLORPAIRS		(077L+1L)		/* implementation-specific limit */
#endif  /* _ast_int8_t && _CHARTYPE64 */

/* color attributes.
   Color-pairs indices stored in the A_COLOR field of a chtype datatype.
   See curses.h WINDOW structure with chtype **_y.
*/
#define COLOR_BLACK     0		/* default basic ordered colors 0-7 */
#define COLOR_RED       1
#define COLOR_GREEN     2
#define COLOR_YELLOW    3
#define COLOR_BLUE      4
#define COLOR_MAGENTA   5
#define COLOR_CYAN      6
#define COLOR_WHITE     7
#define COLOR_MAX       8

/* color manipulation macros.
*/
#define COLOR_PAIR(n)	(n << 25)
#define PAIR_NUMBER(a)  ((a & A_COLOR) >> 25)

/* no_color_video:  video attr that cannot be used with color
                    (because they are implemented using color)
*/
#define WA_STANDOUT       1    /* 0001: bit 0 */
#define WA_UNDERLINE      2    /* 0002: bit 1 */
#define WA_REVERSE        4    /* 0004: bit 2 */
#define WA_BLINK          8    /* 0010: bit 3 */
#define WA_DIM           16    /* 0020: bit 4 */
#define WA_BOLD          32    /* 0040: bit 5 */
#define WA_INVIS         64    /* 0100: bit 6 */
#define WA_PROTECT      128    /* 0200: bit 7 */
#define WA_ALTCHARSET   256    /* 0400: bit 8 */

/* no_color_video:  manipulation macro.
*/
#define ATTR_NCV(n)	(n << 16)

#define IBUFSIZE	1024	/* size for input buffer */
#define MAXKEYLEN	32  	/* max size for function key length or macros */

/*
** Standard alternate character set.  The current ACS world is evolving,
** so we support only a widely available subset: the line drawing characters
** from the VT100, plus a few from the Teletype 5410.  Eventually there
** may be support of more sophisticated ACS line drawing, such as that
** in the Teletype 5410, the HP line drawing set, and the like. There may
** be support for some non line oriented characters as well.
**
** Line drawing ACS names are of the form ACS_trbl, where t is the top, r
** is the right, b is the bottom, and l is the left.  t, r, b, and l might
** be B (blank), S (single), D (double), or T (thick).  The subset defined
** here only uses B and S.
*/
#define ACS_BSSB	(_acs_map['l'])
#define ACS_SSBB	(_acs_map['m'])
#define ACS_BBSS	(_acs_map['k'])
#define ACS_SBBS	(_acs_map['j'])
#define ACS_SBSS	(_acs_map['u'])
#define ACS_SSSB	(_acs_map['t'])
#define ACS_SSBS	(_acs_map['v'])
#define ACS_BSSS	(_acs_map['w'])
#define ACS_BSBS	(_acs_map['q'])
#define ACS_SBSB	(_acs_map['x'])
#define ACS_SSSS	(_acs_map['n'])

/*
 * Human readable names for the most commonly used characters.
 * "Upper", "right", etc. are chosen to be consistent with the vt100 manual.
 */
#define ACS_ULCORNER	ACS_BSSB
#define ACS_LLCORNER	ACS_SSBB
#define ACS_URCORNER	ACS_BBSS
#define ACS_LRCORNER	ACS_SBBS
#define ACS_RTEE	ACS_SBSS
#define ACS_LTEE	ACS_SSSB
#define ACS_BTEE	ACS_SSBS
#define ACS_TTEE	ACS_BSSS
#define ACS_HLINE	ACS_BSBS
#define ACS_VLINE	ACS_SBSB
#define ACS_PLUS	ACS_SSSS
#define ACS_S1		(_acs_map['o'])		/* scan line 1 */
#define ACS_S9		(_acs_map['s'])		/* scan line 9 */
#define ACS_DIAMOND	(_acs_map['`'])		/* diamond */
#define ACS_CKBOARD	(_acs_map['a'])		/* checker board (stipple) */
#define ACS_DEGREE	(_acs_map['f'])		/* degree symbol */
#define ACS_PLMINUS	(_acs_map['g'])		/* plus/minus */
#define ACS_BULLET	(_acs_map['~'])		/* bullet */
	/* Teletype 5410/5420 symbols */
#define ACS_LARROW	(_acs_map[','])		/* arrow pointing left */
#define ACS_RARROW	(_acs_map['+'])		/* arrow pointing right */
#define ACS_DARROW	(_acs_map['.'])		/* arrow pointing down */
#define ACS_UARROW	(_acs_map['-'])		/* arrow pointing up */
#define ACS_BOARD	(_acs_map['h'])		/* board of squares */
#define ACS_LANTERN	(_acs_map['i'])		/* lantern symbol */
#define ACS_BLOCK	(_acs_map['0'])		/* solid square block */


/*---FUNCTIONKEY--- function key values */


/*---TERMSTRUCTS--- the structures bools, nums and strs */


/* KEY_MAP structure */
struct	_key_st
{
	unsigned char	*_pat;	/* pattern received when pressed */
	unsigned char	*_exp;	/* chars to be expanded into */
	short		_key;	/* key value returned to user */
	bool		_user;	/* user-defined key */
	bool		_macro;	/* not a key, a macro */
	struct _key_st	*_next;	/* link list */
	struct _key_st	*_last;
};


/* MOUSE structure */
struct _mouse_st
{
	int 	x, y;	 	/* current mouse location relative to screen (0,0) */
	short	button[3];	/* status of mouse buttons (15 bits) */
	int 	changes;	/* which button has changed */
	short 	_mbapp; 	/* mouse button events to pass to application */
	short	_mbslk; 	/* mouse button events on screen label keys */
	short	_mgrab;	 	/* mouse has been grabbed (TRUE) */
};

/* MOUSE driver */
typedef int (*Mdriver_f)_ARG_((MOUSE*,int(*)()));


/* TERMCAP structure */
struct	_tc_st
{
	struct _bools	_b;	/* boolean caps */
	struct _nums	_n;	/* numeric caps */
	struct _strs1	_s1;	/* string caps */
	struct _strs2	_s2;
	struct _strs3	_s3;

	char		*_area,	/* area to store string caps */
			*_names,/* all different names of term */
			*_term; /* the name used on this invocation */

	chtype		_atvec;	/* available attributes */

	chtype		_acs[128]; /* alternate char set for line graphics */

	short		_use;	/* number of times in used */
	bool		_istc;	/* TRUE: termcap, FALSE: terminfo */

	bool		_seue,	/* comparisons of video ending sequences */
			_seme,
			_seae,
			_ueme,
			_ueae,
			_meae,
			_opae,
			_opme,
			_opse,
			_opue;
};


/* TERMINAL structure */
struct _term_st
{
	TERMCAP		*_tc;		/* termcaps */
	int		_delay;		/* timeout for inputs */
	int		_inpd;		/* input file descriptor */
	int		_ahd;		/* typeahead file descriptor */
	unsigned char	_ibuf[IBUFSIZE]; /* input buffer */
	unsigned char	*_ibeg, *_icur, *_iend;
#if _MULTIBYTE
	int		_ilit;		/* number of bytes to be returned as is */
#endif

	int		_outd;		/* output file descriptor */
	short		_speed,		/* outsput speed */
			_baud;		/* baudrate */

	chtype		_attrs;		/* current attribute set */

	KEY_MAP		*_keys;		/* key map */

	Mdriver_f	_mouse_f;	/* mouse driver function */
	MOUSE		*mouse; 	/* mouse data */

	unsigned char	_killc,		/* kill a line character */
			_erasec;	/* erase a char character */

	bool		_notab,		/* tab does not behave */
			_echo,		/* in duplex mode */
			_raw,		/* in raw mode */
			_nonl;		/* no nl/cr translation */

	bool		_iwait;		/* true if input-pending */
	bool		_mcerr;		/* error during macro matching */
	bool		_ieof;		/* TRUE if end-of-file on input */
#ifdef _TERM_PRIVATE
	_TERM_PRIVATE
#endif
};


/* short-hand MOUSE notations */

#define	BUTTON_RELEASED     	0
#define	BUTTON_PRESSED      	1
#define	BUTTON_CLICKED      	2
#define	BUTTON_DOUBLE_CLICKED 	3
#define	BUTTON_TRIPLE_CLICKED 	4

/* values stored in MOUSE data structure */
#define curmouse		cur_term->mouse
#define	MOUSE_X_POS         	(curmouse->x)
#define	MOUSE_Y_POS         	(curmouse->y)
#define	A_BUTTON_CHANGED()  	(curmouse->changes & 7)
#undef MOUSE_MOVED
#define	MOUSE_MOVED()       	(curmouse->changes & 8)
#define	BUTTON_CHANGED(x)   	(curmouse->changes & (1 << ((x)-1)))
#define	BUTTON_STATUS(x)    	(curmouse->button[(x)-1])
#define	MOUSE_APP_EVENTS       	(curmouse->_mbapp)
#define	MOUSE_SLK_EVENTS       	(curmouse->_mbslk)
#define	HAVE_THE_MOUSE      	(curmouse->_mgrab)

#define	HAS_MOUSE()		(curmouse != (MOUSE*)0 && \
					cur_term->_mouse_f != NIL(MOUSE_DRIVER*))
#define	MOUSE_ON()		(curmouse != (MOUSE*)0 && HAVE_THE_MOUSE && \
					(MOUSE_APP_EVENTS > 0 || MOUSE_SLK_EVENTS > 0))
#define	MOUSE_OFF()		(curmouse == (MOUSE*)0 || !HAVE_THE_MOUSE || \
					(MOUSE_APP_EVENTS == 0 && MOUSE_SLK_EVENTS == 0))

/* Bit Mask for Mouse Button Events */
#define	BUTTON1_RELEASED    	01   	/* bit 0 on */
#define	BUTTON1_PRESSED     	02  	/* bit 1 on */
#define	BUTTON1_CLICKED     	04  	/* bit 2 on */
#define	BUTTON1_DOUBLE_CLICKED	010  	/* bit 3 on */
#define	BUTTON1_TRIPLE_CLICKED	020  	/* bit 4 on */
#define	BUTTON2_RELEASED    	040  	/* bit 5 on */
#define	BUTTON2_PRESSED     	0100  	/* bit 6 on */
#define	BUTTON2_CLICKED     	0200	/* bit 7 on */
#define	BUTTON2_DOUBLE_CLICKED	0400	/* bit 8 on */
#define	BUTTON2_TRIPLE_CLICKED	01000	/* bit 9 on */
#define	BUTTON3_RELEASED    	02000	/* bit 10 on */
#define	BUTTON3_PRESSED     	04000	/* bit 11 on */
#define	BUTTON3_CLICKED     	010000	/* bit 12 on */
#define	BUTTON3_DOUBLE_CLICKED	020000	/* bit 13 on */
#define	BUTTON3_TRIPLE_CLICKED	040000	/* bit 14 on */
#define	ALL_MOUSE_EVENTS    	077777	/* all (or any) mouse button events */
#define	NO_MOUSE_EVENTS      	0     	/* no mouse button events */


_BEGIN_EXTERNS_	/* public data */
#if _BLD_screen && defined(__EXPORT__)
#define extern	__EXPORT__
#endif
#if !_BLD_screen && defined(__IMPORT__)
#define extern  extern __IMPORT__
#endif

extern short		*cswidth,	/* byte sizes of multi-byte chars */
			*scrwidth;	/* display sizes */

extern TERMINAL		*cur_term;
extern TERMCAP		*cur_tc;
extern chtype		*_acs_map;
extern char		*Def_term, *ttytype;

extern char		*boolfnames[];
extern char		*numfnames[];
extern char		*strfnames[];

#undef extern
_END_EXTERNS_

_BEGIN_EXTERNS_
#if _BLD_screen && defined(__EXPORT__)
#define extern __EXPORT__
#endif
#if !_BLD_screen && defined(__IMPORT__) && defined(__EXPORT__)
#define extern  __IMPORT__
#endif

extern int		_addkey _ARG_((char*,char*,int,int,int));
extern int		_deletekey _ARG_((char*,char*,int));
extern int		delkeymap _ARG_(());
extern int		setkeymap _ARG_(());
extern int		draino _ARG_((int));
extern int		napms _ARG_((int));
extern int		vidattr _ARG_((int));
extern int		putp _ARG_((char*));

extern int		chkinput _ARG_(());
extern int		def_prog_mode _ARG_(());
extern int		def_shell_mode _ARG_(());
extern int		flushinp _ARG_(());
extern int		reset_prog_mode _ARG_(());
extern int		reset_shell_mode _ARG_(());
extern int		setbaud _ARG_((int));
extern int		_setcbreak _ARG_((int));
extern int		_setecho _ARG_((int));
extern int		_setflow _ARG_((int));
extern int		_setnl _ARG_((int));
extern int		nl _ARG_((void));
extern int		_setqiflush _ARG_((int));
extern int		_setraw _ARG_((int));

extern TERMINAL*	restartterm _ARG_((char*,int,int*));
extern TERMINAL*	setcurterm _ARG_((TERMINAL*));
extern TERMINAL*	setupterm _ARG_((char*,int,int*));
extern int		delterm _ARG_((TERMINAL*));
extern TERMCAP*		settc _ARG_((char*));
extern int		deltc _ARG_((TERMCAP*));

extern char*		termid _ARG_((int,int));
extern int		has_ic _ARG_(());
extern int		has_il _ARG_(());
extern char*		longname _ARG_(());
extern char*		termname _ARG_(());
extern void		tcdecode _ARG_((char*,char**));
extern int		tgetent _ARG_((char*,char*));
extern int		tgetflag _ARG_((char*));
extern int		tgetnum _ARG_((char*));
extern char*		tgetstr _ARG_((char*, char**));
extern int		tigetflag _ARG_((char*));
extern int		tigetnum _ARG_((char*));
extern char*		tigetstr _ARG_((char*));
extern int		tifgetflag _ARG_((char*));
extern int		tifgetnum _ARG_((char*));
extern char*		tifgetstr _ARG_((char*));

extern char*		tgoto _ARG_((char*,char*,char*));
extern char*		tparm _ARG_((char*,...));
extern int		tputs _ARG_((char*,int,int(*)(int)));
extern int		vidupdate _ARG_((chtype,chtype,int(*)(int)));

extern int		twinsize _ARG_((int,short*,short*));
extern int		typeahead _ARG_((int));
extern int		ttimeout _ARG_((int));
extern int		tinputfd _ARG_((int));
extern int		_ungetch _ARG_((int,int));
extern int		tgetch _ARG_((int));
extern char*		tdupmes _ARG_((void));

#if _MULTIBYTE
extern wchar_t		tgetwch _ARG_((int));
extern int		ungetwch _ARG_((wchar_t));
#endif

extern int		mouse_on _ARG_((short));
extern int		mouse_off _ARG_((short));
extern int		mouse_set _ARG_((short));
extern int		addmdriver _ARG_((char*, Mdriver_f));
extern int		setmdriver _ARG_((char*));
extern int		getmouse _ARG_(());
extern int		request_mouse_pos _ARG_(());
extern int		map_button _ARG_((short));
extern int		getbmap _ARG_(());

#undef extern
_END_EXTERNS_

#if _MULTIBYTE
#define SS2		0216		/* code set 2 */
#define SS3		0217		/* code set 3 */
#endif

/* terminal functions */
#define baudrate()	(cur_term->_baud)
#define erasechar()	(cur_term->_erasec)
#define killchar()	(cur_term->_killc)
#define teof()		(cur_term->_ieof)

/* put a char back to beginning of the input queue */
#define ungetch(c)	_ungetch((c),TRUE)

/* iocontrol functions */
#define nonl()		_setnl(FALSE)
#define cbreak()	_setcbreak(TRUE)
#define nocbreak()	_setcbreak(FALSE)
#define echo()		_setecho(TRUE)
#define noecho()	_setecho(FALSE)
#define raw()		_setraw(TRUE)
#define noraw()		_setraw(FALSE)
#define qiflush()	_setqiflush(TRUE)
#define noqiflush()	_setqiflush(FALSE)
#define flowctl()	_setflow(TRUE)
#define noflowctl()	_setflow(FALSE)

/* function keys */
#define newkey(pat,key,ismacro)	_addkey((pat),0,(key),TRUE,(ismacro))
#define newmap(pat,exp,ismacro)	_addkey((pat),(exp),-1,TRUE,(ismacro))
#define delkey(pat,key)		_deletekey((pat),0,(key))
#define delmap(pat,exp)		_deletekey((pat),(exp),-1)

/* upward compatibility functions */
#define halfdelay(tens)	ttimeout((tens)*100)
#define crmode()	cbreak()
#define nocrmode()	nocbreak()
#define savetty()	saveterm()
#define resetty()	fixterm()
#define saveterm()	def_prog_mode()
#define fixterm()	reset_prog_mode()
#define resetterm()	reset_shell_mode()

/* may have to ifdef out for ex/vi */
#define setterm(name)	setupterm((name),1,0)
#define gettmode()	(OK)

#define termattrs()	(cur_tc->_atvec)	/* available attrs */
#define vidputs(a,cf)	vidupdate((a),cur_term->_attrs,(cf))

#define	istermcap()	(cur_tc->_istc)
#define tstring(s,x,y)	(istermcap() ?	tgoto((s),(char*)(x),(char*)(y)) : \
					tparm((s),(char*)(x),(char*)(y)))

/* internally, the <screen> library does not use long terminfo names */
#if !_BLD_screen && !defined(_BSDCOMPAT)
/*---LONGNAMES--- for terminfo capabilities */
#endif /*!_BLD_screen*/

#endif /* _TERM_H */
!

ed - <<!
E $TMP.HH
/---SYSTEM---/
.r $TMP.hdr
/---FUNCTIONKEY---/
.r $TMP.keys
/---TERMSTRUCTS---/
.r $TMP.struct
/---LONGNAMES---/
.r $TMP.long
w $TMP.c
q
!

cmp -s $TMP.c $OUT || mv $TMP.c $OUT
