CAP=$1 TMP=t$$ OUT=keyname.c

trap "status=\$?; rm -f $TMP.*; exit \$status" 0 1 2

grep 'KEY_' $CAP > $TMP.c

ed - <<!
E $TMP.c
g/, [a-z,A-Z][a-z,A-Z]*.*/s///
g/,.*, /s//",	/
g/^/s//	 { "/
g/.*/s//& },/
a
	 { (char*)0, -1 }
	};

#if __STD_C
char* keyname(int key)
#else
char* keyname(key) int key;
#endif
{
	int		i;
	KEY_MAP*	k;
	char*		s;

	if(key == ERR)
		return "ERR";

	key &= A_CHARTEXT;

#ifdef KEY_BREAK
	if(key == KEY_BREAK)
		return "KEY_BREAK";
#endif
#ifdef KEY_RESET
	if(key == KEY_RESET)
		return "KEY_RESET";
#endif
#ifdef KEY_SRESET
	if(key == KEY_SRESET)
		return "KEY_SRESET";
#endif
#ifdef KEY_ENTER
	if(key == KEY_ENTER)
		return "KEY_ENTER";
#endif

	for(i = 0; Keyname[i]._key != -1; ++i)
		if(Keyname[i]._key == key)
			return Keyname[i]._name;

	for(k = _keymap; k; k = k->_next)
	{	if(k->_key != key)
			continue;
		if(k->_macro)
			return "MACRO_KEY";
		if(k->_user)
			return "USER_DEFINED_KEY";
	}

	s = unctrl(key);
	return (s && s[0]) ? s : "UNKNOWN_KEY";
}
.
0a
#include	"scrhdr.h"

typedef struct _keyname_s
{	char*	_name;
	int	_key;
} Keyname_t;

static Keyname_t Keyname[] =
	{
.
w
q
!

cmp -s $TMP.c $OUT || mv $TMP.c $OUT
