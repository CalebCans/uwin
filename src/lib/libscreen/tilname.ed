CAP=$1 TMP=t$$ OUT=tilname.c

trap "status=\$?; rm -f $TMP.*; exit \$status" 0 1 2

ed - <<!
E $CAP
g/^#.*/d
g/,.*/s///
/--- begin bool/
1,.d
/--- end bool/
1,.-1w $TMP.bool
/--- begin num/
1,.d
/--- end num/
1,.-1w $TMP.num
/--- begin str/
1,.d
/--- end str/
1,.-1w $TMP.str
Q
!

for i in bool num str
do
awk '{printf "\"%s\" %d\n", $0, i++}' < $TMP.$i > $TMP.$i.idx
sort +0 -1 $TMP.$i.idx > $TMP.$i
rm $TMP.$i.idx

ed - >/dev/null 2>&1 <<!
E $TMP.$i
1,\$s/ .*/,/
0a

char*	${i}longnames[] =
{
.
\$a
NIL(char*)
};
.
w $TMP.$i.str
E $TMP.$i
1,\$s/.* //
1,\$s/\$/,/
0a

static short	${i}index[] =
{
.
\$a
-1
};
.
w $TMP.$i.idx
Q
!
done

ed - >/dev/null <<!
a
#include	"termhdr.h"

.
\$r $TMP.bool.str
\$r $TMP.bool.idx
\$r $TMP.num.str
\$r $TMP.num.idx
\$r $TMP.str.str
\$r $TMP.str.idx
\$a

/*
**	Get the value of a boolean cap using its long name
**	Return -1 if the name is invalid
*/
#if __STD_C
int tifgetflag(char* id)
#else
int tifgetflag(id)
char	*id;
#endif
{
	reg bool	*bs;
	reg int		i;
	static int	n_bool = -1;

/*---BOOLS---*/
	if(n_bool < 0)
	{
		for(i = 0; boolindex[i] >= 0; ++i)
			;
		n_bool = i;
	}
	bs = &(T_bw);
	return (i = _match(boollongnames,boolindex,n_bool,id)) >= 0 ? bs[i] : -1;
}

/*
**	Get the value of a num cap using its long name
**	Return -2 if the name is invalid
*/
#if __STD_C
int tifgetnum(char* id)
#else
int tifgetnum(id)
char	*id;
#endif
{
	reg short	*ns;
	reg int		i;
	static int	n_num = -1;

/*---NUMS---*/
	if(n_num < 0)
	{
		for(i = 0; numindex[i] >= 0; ++i)
			;
		n_num = i;
	}
	ns = &(T_cols);
	return (i = _match(numlongnames,numindex,n_num,id)) >= 0 ? ns[i] : -2;
}

/*
**	Get the value of a string cap using its long name
**	Return (char *)(-1) if the name is invalid
*/
#if __STD_C
char*	tifgetstr(char* id)
#else
char*	tifgetstr(id)
char	*id;
#endif
{
	reg char	**ss;
	reg int		i;
	static int	n_str = -1;

/*---STRS---*/
	if(n_str < 0)
	{
		for(i = 0; strindex[i] >= 0; ++i)
			;
		n_str = i;
	}
	ss = &(T_cbt);
	return (i = _match(strlongnames,strindex,n_str,id)) >= 0 ? ss[i] : (char*)(-1);
}
.
w $TMP.c
Q
!

cmp -s $TMP.c $OUT || mv $TMP.c $OUT
