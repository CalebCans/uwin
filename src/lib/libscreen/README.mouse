                    ADDING MOUSE CAPABILITIES TO CURSES

                        J. J. Snyder,  AT&T BL11267
                                09/16/1993


NOTES

* Thanks to K. P. Vo, on whose implementation of the
  curses/screen library this work is based, for helpful advice.

* Mouse clicking on screen-labelled keys to activate the
  associated function key has not (yet) been implemented.


NEW FILES

    User-callable mouse functions, per USL TM, except as noted:
    +  additional user-callable functions related to mouse driver
    -  additional internal utility functions

mouseon.c: 

    mouse_on(short mbe)     /* pass these mouse button events to app (OR in) */
    mouse_set(short mbe)    /* pass only these mouse button events to app */
    map_button(short mbe)   /* map these slk mouse button events to fun key */

    ^---  first call to any of these 3 when "kmous" term cap is defined causes
          initialization of mouse data structure and mouse driver pointer
          (via  _mouse_init()  below)

    mouse_off(short mbe)    /* do not pass these mouse button events to app */

    MOUSE_DRIVER data structure declaration  (see below)

  +    dmpmdtable()         /* dump mouse driver table (to sfstderr) */
  +    addmdriver(char* name, Mdriver_f fun )  /* add mousedriver fun to table */
  +    setmdriver(char* name)   /* use this mouse driver function in table */
  -    _mouse_init(char* name)  /* initialize mouse data data structure,
                                /* find mouse driver function, and
                                /* set set pointers in for current terminal;
                                /* called by setupterm() */

mouseget.c
    getmouse()     /* return mouse button events being passed to app */

mousemap.c
    getbmap()      /* return slk mouse button events being mapped to fun keys */

mousereq.c
    request_mouse_pos()     /* Tell device to report cur mouse ptr position */

wmouse.c
    wmouse_position(WINDOW *w, short *y, short *x)    /* mouse pos in window */

mousecmd.c
  +    mouse_cmd(char *cmd)    /* send a string cap command to the mouse */

mgetch.c:  to be called by mouse drivers to get next char in mouse escape seq
  -    mgetch()        /* get next char in mouse escape sequence */
        
demouse.c:  called by tgetch() to de-instantiate mouse escape sequence

  -    _demouse()      /* calls _curmousedriver( MOUSE_DATA, mesa )  */
  -    _mousesaver()   /* saves mouse status data for detecting changes */

nextname.c:  returns next terminal name from list supplied by cur_tc->_names;

  -    _nextname(char* list)  /* find next name in "this|list:" */
                              /* called by  do_mouse_init(name) */


mouse_xterm.c:  mouse driver function for X-11 Window System xterm emulator
                called from demouse() on behalf of tgetch()
    
  -    mouse_xterm(int type)  /* X-11 xterm mouse driver;
              /* 3 cmds:  MOUSE_INIT, MOUSE_DATA, MOUSE_END */
              /* uses  mgetch()  to get chars from the mouse escape sequence */
  -    mxy_xterm(char c)      /* de-instantiate an xterm mouse coordinate */


NEW DATA STRUCTURES

    MOUSE:  in  term.h

        #define MOUSE       struct _mouse_st
        typedef int (*Mdriver_f)_ARG_((int));

        /* Added to TERMINAL structure */
            Mdriver_f   _mouse_f;   /* mouse driver function */
            MOUSE       *_mouse;    /* mouse data */

        /* MOUSE structure */
        struct _mouse_st
        {
            short   _x, _y;     /* current mouse loc relative to screen (0,0) */
            short   _button[3]; /* status of mouse buttons (15 bits) */
            short   _changes;   /* which button has changed */
            short   _mbapp;     /* mouse button events to pass to application */
            short   _mbslk;     /* mouse button events on soft label keys */
        };


    MOUSE_DRIVER:  in  mouseon.c

        /*    typedef int (*Mdriver_f)_ARG_((int));        /* in term.h */
            typedef struct _mouse_driver    MOUSE_DRIVER;

        /* mouse driver structure */
        struct _mouse_driver
        {
            char            *name;
            Mdriver_f       fun;    /* addr of mouse driver function */
            MOUSE_DRIVER    *next;
        };

        extern    mouse_xterm _ARG_((int));

        MOUSE_DRIVER     MD_xterm    =
                         { "xterm", (Mdriver_f)mouse_xterm, NIL(MOUSE_DRIVER*) };

        MOUSE_DRIVER     *MD_Table=&MD_xterm;


OTHER CHANGED HEADERS

term.h  and  term.H:    define short-hand MOUSE notations:

    #define BUTTON_RELEASED         0
    #define BUTTON_PRESSED          1
    #define BUTTON_CLICKED          2
    #define BUTTON_DOUBLE_CLICKED   3
    #define BUTTON_TRIPLE_CLICKED   4

    /* values stored in MOUSE data structure */
    #define curmouse    cur_term->_mouse
    #define MOUSE_X_POS             (curmouse->_x)
    #define MOUSE_Y_POS             (curmouse->_y)
    #define A_BUTTON_CHANGED()      (curmouse->_changes & 7)
    #define MOUSE_MOVED()           (curmouse->_changes & 8)
    #define BUTTON_CHANGED(x)       (curmouse->_changes & (1 << ((x)-1))
    #define BUTTON_STATUS(x)        (curmouse->_button[(x)-1])
    #define MOUSE_APP_EVENTS        (curmouse->_mbapp)
    #define MOUSE_SLK_EVENTS        (curmouse->_mbslk)

    #define MOUSE_ON()              \
       (curmouse != NIL(MOUSE*) && (MOUSE_APP_EVENTS > 0 || MOUSE_SLK_EVENTS > 0))
    #define MOUSE_OFF()             \
       (curmouse == NIL(MOUSE*) || (MOUSE_APP_EVENTS == 0 && MOUSE_SLK_EVENTS == 0))

    /* Bit Mask for Mouse Button Events */
    #define BUTTON1_RELEASED        01      /* bit 0 on */
    #define BUTTON1_PRESSED         02      /* bit 1 on */
    #define BUTTON1_CLICKED         04      /* bit 2 on */
    #define BUTTON1_DOUBLE_CLICKED  010     /* bit 3 on */
    #define BUTTON1_TRIPLE_CLICKED  020     /* bit 4 on */
    #define BUTTON2_RELEASED        040     /* bit 5 on */
    #define BUTTON2_PRESSED         0100    /* bit 6 on */
    #define BUTTON2_CLICKED         0200    /* bit 7 on */
    #define BUTTON2_DOUBLE_CLICKED  0400    /* bit 8 on */
    #define BUTTON2_TRIPLE_CLICKED  01000   /* bit 9 on */
    #define BUTTON3_RELEASED        02000   /* bit 10 on */
    #define BUTTON3_PRESSED         04000   /* bit 11 on */
    #define BUTTON3_CLICKED         010000  /* bit 12 on */
    #define BUTTON3_DOUBLE_CLICKED  020000  /* bit 13 on */
    #define BUTTON3_TRIPLE_CLICKED  040000  /* bit 14 on */
    #define ALL_MOUSE_EVENTS        077777  /* all (any) mouse button events */

    /* mouse driver commands */
    #define MOUSE_INIT      0
    #define MOUSE_DATA      1
    #define MOUSE_END       2


termhdr.h:  defines

    extern int    _mouse_init _ARG_(());
    extern int    _demouse _ARG_(());


Term.caps:  defines new mouse capabilities  (per USL TM except  rel_mouse )

    buttons,              "btns"  "BT"    # buttons on mouse
    key_mouse,            "kmous" "Km"    KEY_MOUSE, 0631, mouse event occurred
    mouse_info,           "minfo" "Mi"    Mouse status information
    req_mouse_pos,        "reqmp" "RQ"    Request mouse position report
    get_mouse,            "getm"  "Gm"    Curses should get mouse button events
    rel_mouse,            "relm"  "Rm"    Curses should release the mouse - NEW


NEW HOOKS IN SCREEN CODE

    initscr()                       /* unchanged */
        newscreen()                 /* unchanged */
            setupterm(name, , )     /* revised */
                ntrm->_mouse_f = NIL(Mdriver_f);    /* mouse driver */
                ntrm->_mouse   = NIL(MOUSE*);       /* mouse data structure */

    tgetch()                        /* revised */
        if(kp->_key == KEY_MOUSE  &&  MOUSE_ON())
        {   /* de-instantiate mouse_info input string and */
            /* increment _inputbeg to consume mouse esc seq chars */
            reg int rv;
            _inputcur = _inputbeg;
            rv = _demouse( );
            _inputbeg = _inputcur;
            return rv;
        }

    endwin()                        /* revised */
		/* for mouse  --  but without linking in any mouse functions! */
		if( MOUSE_ON() )    /* leave mouse structure for any restoration */
		{   _puts( T_relm );
			_tflush();
		}

	reset_prog_mode()				/* revised */
		/* for mouse  --  but without linking in any mouse functions! */
		if(MOUSE_ON())  /* if the mouse was grabbed before, grab it back */
		{   _puts( T_getm );
			_tflush();
		}



TYPICAL REFERENCE BY APPLICATION CODE

        At shell level:

            export TERM TERMINFO TERMCAP
            TERM=xterm         # or as appropriate
            TERMINFO=/unknown  # tic doesn't know about mouse capabilities
            # be sure TERMCAP include the mouse escape sequences
            TERMCAP="mxterm|xterm:  .... :\
                :BT#3:Km=\E[M:Gm=\E[?1000h:Rm=\E[?1000l:\
                : ... :"
    
        At the C level:

            #include <curses.h>

            WINDOW  *lwin;

                /* start screen/curses, read in TERM and TERMCAP */
                lwin = initscr();

                signal( SIGINT, die );          /* to restore tty stats */
                cbreak();                       /* char by char */
                noecho();
                nonl();

                keypad( lwin, TRUE );            /* activate terminal keypad */

                /* now tell curses to grab mouse events; */
                /* checks if "kmous" terminal capability is defined  */
                mouse_on( ALL_MOUSE_EVENTS );

                /* now do the mousey application */
                /*     ...
                /*     ...
                /*     ...
                /*     ...
                */  

                /* restore terminal for normal use */
                signal( SIGINT, SIG_IGN );
                wmove( lwin, Lines-1, Cols-1 );
                endwin();    /* restore terminal and mouse to normal mode */
