/* : : generated from /home/RESEARCH/gsf/tst/package/uwin/src/lib/libposix/features/aso by iffe version 2011-12-13 : : */
#ifndef _def_aso_posix
#define _def_aso_posix	1
#define _sys_types	1	/* #include <sys/types.h> ok */
#define _LIB_AdvAPI32	1	/* /msdev/platformsdk/lib/AdvAPI32.Lib is a library */
#define _LIB_User32	1	/* /msdev/platformsdk/lib/User32.Lib is a library */
#define _LIB_Shell32	1	/* /msdev/platformsdk/lib/Shell32.Lib is a library */
#define _LIB_Mpr	1	/* /msdev/platformsdk/lib/Mpr.Lib is a library */
#define _LIB_WinMM	1	/* /msdev/platformsdk/lib/WinMM.Lib is a library */
/* winix Interlocked */
#include <ast_windows.h>
#define _aso_cas32(p,o,n)	InterlockedCompareExchange((LONG volatile*)p,n,o)
#define _aso_inc32(p)		(InterlockedIncrement((LONG volatile*)p)-1)
#define _aso_dec32(p)		(InterlockedDecrement((LONG volatile*)p)+1)
#if _X64
#define _aso_cas64(p,o,n)	InterlockedCompareExchange64((LONGLONG volatile*)p,n,o)
#define _aso_inc64(p)		(InterlockedIncrement64((LONGLONG volatile*)p)-1)
#define _aso_dec64(p)		(InterlockedDecrement64((LONGLONG volatile*)p)+1)
#define _aso_casptr(p,o,n)	((void*)InterlockedCompareExchange64((LONGLONG volatile*)p,(LONGLONG)n,(LONGLONG)o))
#else
#if _BLD_posix
#include "dl.h"
	typedef struct LL_s
	{
		LONG		a;
		LONG		b;
	} LL_t;
	typedef union
	{
		LONGLONG	i;
		LL_t		ll;
	} LL_u;

#define _aso_cas64(p,o,n)	_aso_InterlockedCompareExchange64((LONGLONG volatile*)p,n,o)
	static LONGLONG _aso_InterlockedCompareExchange64_init(LONGLONG volatile*, LONGLONG, LONGLONG);
	typedef LONGLONG (*_aso_InterlockedCompareExchange64_f)(LONGLONG volatile*, LONGLONG, LONGLONG);
	static _aso_InterlockedCompareExchange64_f _aso_InterlockedCompareExchange64 = _aso_InterlockedCompareExchange64_init;
	static LONGLONG _aso_InterlockedCompareExchange64_32(LONGLONG volatile* p, LONGLONG o, LONGLONG n)
	{
		LL_t*		lp = (LL_t*)p;
		LL_t*		op = (LL_t*)&o;
		LL_t*		np = (LL_t*)&n;
		LONGLONG	r;

		r = *p;
		if (_aso_cas32(&lp->a, op->a, np->a) == op->a)
		{
			if (_aso_cas32(&lp->b, op->b, np->b) == op->b)
				return o;
			_aso_cas32(&lp->a, np->a, op->a);
		}
		return r;
	}
	static LONGLONG _aso_InterlockedCompareExchange64_init(LONGLONG volatile* p, LONGLONG o, LONGLONG n)
	{
		if (!(_aso_InterlockedCompareExchange64 = (_aso_InterlockedCompareExchange64_f)getsymbol(MODULE_kernel, "InterlockedCompareExchange64")))
			_aso_InterlockedCompareExchange64 = _aso_InterlockedCompareExchange64_32;
		return _aso_InterlockedCompareExchange64(p, o, n);
	}

#define _aso_inc64(p)		(_aso_InterlockedIncrement64((LONGLONG volatile*)p)-1)
	typedef LONGLONG (*_aso_InterlockedIncrement64_f)(LONGLONG volatile*);
	static LONGLONG _aso_InterlockedIncrement64_init(LONGLONG volatile*);
	static _aso_InterlockedIncrement64_f _aso_InterlockedIncrement64 = _aso_InterlockedIncrement64_init;
	static LONGLONG _aso_InterlockedIncrement64_32(LONGLONG volatile* p)
	{
		LONGLONG	o;

		do
		{
			o = *p;
		} while (_aso_InterlockedCompareExchange64_32(p, o, o + 1) != o);
		return o;
	}
	static LONGLONG _aso_InterlockedIncrement64_init(LONGLONG volatile* p)
	{
		if (!(_aso_InterlockedIncrement64 = (_aso_InterlockedIncrement64_f)getsymbol(MODULE_kernel, "InterlockedIncrement64")))
			_aso_InterlockedIncrement64 = _aso_InterlockedIncrement64_32;
		return _aso_InterlockedIncrement64(p);
	}

#define _aso_dec64(p)		(_aso_InterlockedDecrement64((LONGLONG volatile*)p)+1)
	typedef LONGLONG (*_aso_InterlockedDecrement64_f)(LONGLONG volatile*);
	static LONGLONG _aso_InterlockedDecrement64_init(LONGLONG volatile*);
	static _aso_InterlockedDecrement64_f _aso_InterlockedDecrement64 = _aso_InterlockedDecrement64_init;
	static LONGLONG _aso_InterlockedDecrement64_32(LONGLONG volatile* p)
	{
		LONGLONG	o;

		do
		{
			o = *p;
		} while (_aso_InterlockedCompareExchange64_32(p, o, o - 1) != o);
		return o;
	}
	static LONGLONG _aso_InterlockedDecrement64_init(LONGLONG volatile* p)
	{
		if (!(_aso_InterlockedDecrement64 = (_aso_InterlockedDecrement64_f)getsymbol(MODULE_kernel, "InterlockedDecrement64")))
			_aso_InterlockedDecrement64 = _aso_InterlockedDecrement64_32;
		return _aso_InterlockedDecrement64(p);
	}
#endif
#define _aso_casptr(p,o,n)	((void*)InterlockedCompareExchange((LONG volatile*)p,(LONG)n,(LONG)o))
#endif

#define _aso_fcntl	1	/* fcntl(F_SETLCK[W]) work */
#define _aso_semaphore	1	/* semget semop semctl work */
#endif
