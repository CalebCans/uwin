.de L		\" literal font
.ft 5
.it 1 }N
.if !\\$1 \&\\$1 \\$2 \\$3 \\$4 \\$5 \\$6
..
.de LR
.}S 5 1 \& "\\$1" "\\$2" "\\$3" "\\$4" "\\$5" "\\$6"
..
.de RL
.}S 1 5 \& "\\$1" "\\$2" "\\$3" "\\$4" "\\$5" "\\$6"
..
.de EX		\" start example
.ta 1i 2i 3i 4i 5i 6i
.PP
.RS
.PD 0
.ft 5
.nf
..
.de EE		\" end example
.fi
.ft
.PD
.RE
.PP
..
.TH UWIN 3
.SH NAME
uwin \- win32 programming extenstion for U/WIN
.SH SYNOPSIS
.ft 5
.nf
#include <uwin.h>

Handle_t	uwin_handle(int \fIfd\fP, int \fIwhich\fP);
unsigned long	uwin_ntpid(pid_t \fIpid\fP);
pid_t		uwin_fork(int \fIflags\fP);
int		uwin_path(const char *\fIpath\fP,char *\fIbuff\fP ,int \fIbsize\fP);
int		uwin_unpath(const char *\fIpath\fP,char *\fIbuff\fP ,int \fIbsize\fP);
Handle_t	uwin_mktoken(const char* \fIname\fP, const char * \fIpasswd\fP int \fIflags\fP);
pid_t	uwin_spawn(const char *\fIpath\fP, char *\fIargv\fP const[], char *\fIenv\fP const[],const struct spawndata *\fIdata\fP);
.fi
.ft
.SH DESCRIPTION
These functions provide a bridge between the U/WIN Unix environment
and the WIN32 environment enabling the use of native WIN32 calls
from U/WIN applications.
Including the header
.L <uwin.h>
causes the header
.L <windows.h>
to also be included.
The following types are also defined by
.L <uwin.h>:
.nf
.ft 5
	typedef HANDLE	Handle_t;
	typedef STARTUPINO	Startupinfo_t;
.ft
.fi
.PP
Given a U/WIN file descriptor \fIfd\fP,
.L uwin_handle()
returns the corresponding WIN32 handle.
Since a U/WIN file descriptor may have two handles associated with
it, use
.L UWIN_PRIMARY
for \fIwhich\fP
to specify the primary handle.
.PP
The
.L uwin_ntpid()
function returns the WIN32 process id given the U/WIN
process id, \fIpid\fP.
.PP
The
.L uwin_fork()
function creates a child daemon process which is a copy of
the parent process and with an argument of \fB0\fP the
same as
.L fork()
except that this the child process is detached from the console.
The \fIflags\fP argument can consists of any of the following:
.TP
\f5UWIN_KILL_PARENT\fP
The parent process exits.
.TP
\f5UWIN_NEW_SESSION\fP
The child process calls
.L setsid()
to create a new session.
.TP
\f5UWIN_CHDIR_ROOT\fP
The child process changes the directory to \f5/\fP.
.TP
\f5UWIN_DEVNULL\fP
The child file descriptors for \f50\fP, \f51\fP, and \f52\fP
are set to
.LR /dev/null .
.PP
The
.L uwin_path()
function converts a U/WIN pathname, \fIpath\fP,
into an equivalent WIN32 pathname.
The WIN32 pathname is returned in \fIbuff\fP and the
length of the WIN32 path is returned.
The argument \fIbsize\fP specifies the number of characters
that \fIbuff\fP can hold.
If the returned value is greater than or equal
to \fIbsize\fP, then
\fIbuff\fP will not contain the complete WIN32 path.
.PP
The
.L uwin_unpath()
function converts a Win32 pathname, \fIpath\fP,
into an equivalent U/WIN pathname.
The U/WIN pathname is returned in \fIbuff\fP and the
length of the U/WIN path is returned.
The argument \fIbsize\fP specifies the number of characters
that \fIbuff\fP can hold.
If the returned value is greater than or equal
to \fIbsize\fP, then
\fIbuff\fP will not contain the complete U/WIN path.
.PP
The
.L uwin_mktoken()
function returns an access token given a username, \fIname\fP,
and a password, \fIpasswd\fP.
If there is no account for the given user, or if the password
is not correct
.L uwin_mktoken()
returns
.LR 0 .
Any combination of the following flags can be specified:
.TP
\f5UWIN_TOKCLOSE\fP
Close the token before returning.  The return
value will still be non-zero if the \fIname\fP and \fIpasswd\fP
arguments were valid.
.TP
\f5UWIN_TOKUSE\fP
The created token will become the effective user and group
of the current process.
.PP
The \f5uwin_spawn()\fP function provides a UNIX style interface
to the WIN32 \f5CreateProcess()\fP function.
In addition to the argument list \fIargv\fP and environment list \fIenv\fP,
\f5uwin_spawn()\fP allows you to specify \fIdata\fP as a pointer
to the \f5spawndata\fP structure which contains
following elements:
.nf
.ft 5
	Handle_t	tok;	/* create with this token		*/
	unsigned long	flags;	/* create process flags		*/
	Startupinfo_t	*start;	/* structure containing starup info	*/
	id_t		grp;	/* the process group id		*/
	int		trace;	/* trace file descriptor		*/
.ft
.fi
If the \f5tok\fP
field is non-zero, the the process will be created with \f5tok\fP
as the primary token.
.PP
If the \f5start\fP field is non-zero, the it should point
to a Startup_t structure that is passed as 9th argument to
\f5CreateProcess()\fP. 
.PP
In addition to the creation flags that can be specified for
\f5CreateProcess()\fP,
any combination of the following flags can also be specified:
.TP
\f5UWIN_TRACE_CALL\fP
Trace each system call.
The \f5trace\fP field specifies the file descriptor
for the trace.
.TP
\f5UWIN_TRACE_COUNT\fP
Produce a count summary for each system call
The \f5trace\fP field specifies the file descriptor
for the trace.
.TP
\f5UWIN_TRACE_INHERIT\fP
Causes the trace flags to be inherited by child processes
.TP
\f5UWIN_TRACE_TIME\fP
Produce a cycle count for system calls
.TP
\f5UWIN_TRACE_VERBOSE\fP
Enable the verbase trace option.
.TP
\f5UWIN_SPAWN_EXEC\fP
If this flag is specifed, then the new process replaces
the existing process.  In this case the function will
only return on failure.
.PP
Unless the
.L UWIN_SPAWN_EXEC
option is specified,
.L uwin_spawn()
returns the process id 
of the new process if successful.
On failure, a
.L \-1
is returned and the variable
.L errno
is set to indicate the error.
.SH "SEE ALSO"
spawnve(2), spawnveg(2), fork(2), daemon(3) 
